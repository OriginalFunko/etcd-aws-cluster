#!/bin/bash
pkg="etcd-aws-cluster"
version="0.5"
etcd_peers_file_path="/tmp/etcd-vars"

# Functions to handle proxies correctly
aws() {
  http_proxy=$AWS_HTTP_PROXY \
  HTTP_PROXY=$AWS_HTTP_PROXY \
  https_proxy=$AWS_HTTPS_PROXY \
  HTTPS_PROXY=$AWS_HTTPS_PROXY \
  /usr/bin/aws "$@"
}

meta_curl() {
  curl --connect-timeout 2 -s "http://169.254.169.254$1"
}

# Allow default client/server ports to be changed if necessary
etcd_peer_scheme=${ETCD_PEER_SCHEME:-http}
server_port=${ETCD_SERVER_PORT:-2380}

#if the script has already run just exit
if [ -f "$etcd_peers_file_path" ]; then
    echo "$pkg: etcd-peers file $etcd_peers_file_path already created, exiting"
    exit 0
fi

# Discover our AWS metadata
AWS_DEFAULT_REGION=$(meta_curl /latest/dynamic/instance-identity/document | jq --raw-output .region)
if [[ -z "$AWS_DEFAULT_REGION" ]]; then
    echo "$pkg: failed to get region"
    exit 1
fi
export AWS_DEFAULT_REGION

ec2_instance_id=$(meta_curl /latest/meta-data/instance-id)
if [[ ! $ec2_instance_id ]]; then
    echo "$pkg: failed to get instance id from instance metadata"
    exit 2
fi

ec2_instance_ip=$(meta_curl /latest/meta-data/local-ipv4)
if [[ ! $ec2_instance_ip ]]; then
    echo "$pkg: failed to get instance IP address"
    exit 3
fi

# If we're not in proxy mode, find what autoscaling group we're in.
if [[ ! $PROXY_ASG ]]; then
    asg_name=$(aws autoscaling describe-auto-scaling-groups | jq --raw-output ".[] | map(select(.Instances[].InstanceId | contains(\"$ec2_instance_id\"))) | .[].AutoScalingGroupName")
    if [[ ! "$asg_name" ]]; then
        echo "$pkg: failed to get the auto scaling group name"
        exit 4
    fi
else
    if [[ -n $ASG_BY_TAG ]]; then
        asg_name=$(aws autoscaling describe-auto-scaling-groups | jq --raw-output ".[] | map(select(.Tags[].Value == \"$PROXY_ASG\")) | .[].AutoScalingGroupName")
    else
        asg_name=$PROXY_ASG
    fi
fi

# Discover all the instances in the ASG and create an Etcd env var for it.
etcd_initial_cluster=$(aws ec2 describe-instances --instance-ids $(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$asg_name" | jq .AutoScalingGroups[0].Instances[].InstanceId | xargs) | jq -r ".Reservations[].Instances | map(.InstanceId + \"=$etcd_peer_scheme://\" + .NetworkInterfaces[].PrivateIpAddress + \":$server_port\")[]" | xargs | sed 's/  */,/g')
if [[ ! $etcd_initial_cluster ]]; then
    echo "$pkg: unable to get peers from auto scaling group"
    exit 10
fi

cat > "$etcd_peers_file_path" <<EOF
export ETCD_INITIAL_CLUSTER_STATE=new
export ETCD_NAME=$ec2_instance_id
export ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF

exit 0
